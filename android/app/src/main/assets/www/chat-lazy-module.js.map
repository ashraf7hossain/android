{"version":3,"sources":["./src/addons/mod/chat/pages/chat/chat.html","./src/addons/mod/chat/pages/index/index.html","./src/addons/mod/chat/pages/session-messages/session-messages.html","./src/addons/mod/chat/pages/sessions/sessions.html","./src/addons/mod/chat/chat-lazy.module.ts","./src/addons/mod/chat/classes/chat-sessions-source.ts","./src/addons/mod/chat/pages/chat/chat.scss","./src/addons/mod/chat/pages/chat/chat.ts","./src/addons/mod/chat/pages/index/index.ts","./src/addons/mod/chat/pages/session-messages/session-messages.scss","./src/addons/mod/chat/pages/session-messages/session-messages.ts","./src/addons/mod/chat/pages/sessions/sessions.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,ikCAAkgC,gBAAgB,8IAA8I,mEAAmE,0aAA0a,8DAA8D,kCAAkC,4CAA4C,yBAAyB,GAAG,qXAAqX,8DAA8D,kCAAkC,2CAA2C,yBAAyB,GAAG,wVAAwV,8DAA8D,kCAAkC,oDAAoD,yBAAyB,GAAG,8ZAA8Z,8DAA8D,kCAAkC,+CAA+C,yBAAyB,GAAG,oaAAoa,8DAA8D,kCAAkC,8CAA8C,oBAAoB,GAAG,oWAAoW,8DAA8D,8EAA8E,wBAAwB,8tCAA8tC,2DAA2D,sbAAsb,sCAAsC,qEAAqE,E;;;;;;;;;;;;ACA5zM;AAAe,s7BAAu3B,oCAAoC,sNAAsN,E;;;;;;;;;;;;ACAhoC;AAAe,sSAAuO,yCAAyC,qPAAqP,oCAAoC,mOAAmO,gBAAgB,mIAAmI,kEAAkE,8aAA8a,8DAA8D,kCAAkC,4CAA4C,yBAAyB,GAAG,uXAAuX,8DAA8D,kCAAkC,2CAA2C,yBAAyB,GAAG,wVAAwV,8DAA8D,kCAAkC,oDAAoD,yBAAyB,GAAG,8ZAA8Z,8DAA8D,kCAAkC,+CAA+C,yBAAyB,GAAG,oaAAoa,8DAA8D,kCAAkC,8CAA8C,oBAAoB,GAAG,sWAAsW,8DAA8D,8EAA8E,wBAAwB,4sBAA4sB,E;;;;;;;;;;;;ACAp9J;AAAe,sSAAuO,2CAA2C,+RAA+R,oCAAoC,oUAAoU,uDAAuD,kmBAAkmB,gDAAgD,gEAAgE,mCAAmC,oQAAoQ,qBAAqB,sCAAsC,qBAAqB,6VAA6V,+BAA+B,uTAAuT,E;;;;;;;;;;;;ACA3tF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEQ;AACc;AACC;AACsB;AAClB;AACH;AACmC;AAC9C;AACe;AACQ;AACnB;AAElD,MAAM,YAAY,GAAW;IACzB;QACI,IAAI,EAAE,iBAAiB;QACvB,SAAS,EAAE,wEAAqB;KACnC;IACD;QACI,IAAI,EAAE,sBAAsB;QAC5B,SAAS,EAAE,qEAAoB;QAC/B,aAAa,EAAE,CAAC,gEAAa,CAAC;KACjC;CACJ,CAAC;AAEF,MAAM,YAAY,GAAW;IACzB,GAAG,YAAY;IACf;QACI,IAAI,EAAE,0BAA0B;QAChC,SAAS,EAAE,kFAAwB;KACtC;IACD;QACI,IAAI,EAAE,oDAAoD;QAC1D,SAAS,EAAE,wGAA+B;KAC7C;CACJ,CAAC;AAEF,MAAM,YAAY,GAAW;IACzB,GAAG,YAAY;IACf;QACI,IAAI,EAAE,0BAA0B;QAChC,SAAS,EAAE,kFAAwB;QACnC,QAAQ,EAAE;YACN;gBACI,IAAI,EAAE,2BAA2B;gBACjC,SAAS,EAAE,wGAA+B;aAC7C;SACJ;KACJ;CACJ,CAAC;AAEF,MAAM,MAAM,GAAW;IACnB,GAAG,iFAAiB,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,2DAAU,CAAC,QAAQ,CAAC;IAC7D,GAAG,iFAAiB,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,2DAAU,CAAC,QAAQ,CAAC;CAChE,CAAC;IAeW,sBAAsB,SAAtB,sBAAsB;CAAG;AAAzB,sBAAsB;IAblC,8DAAQ,CAAC;QACN,OAAO,EAAE;YACL,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC7B,oEAAgB;YAChB,0FAA4B;SAC/B;QACD,YAAY,EAAE;YACV,wEAAqB;YACrB,qEAAoB;YACpB,kFAAwB;YACxB,wGAA+B;SAClC;KACJ,CAAC;GACW,sBAAsB,CAAG;AAAH;;;;;;;;;;;;;AClFnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAGoE;AAC7C;AACK;AACX;AACV;AACsD;AAE9F;;GAEG;AACI,MAAM,0BAA2B,SAAQ,kHAA0D;IAUtG,YAAY,QAAgB,EAAE,MAAc,EAAE,IAAY;QACtD,KAAK,EAAE,CAAC;QALZ,YAAO,GAAG,KAAK,CAAC;QAChB,YAAO,GAAG,CAAC,CAAC;QAMR,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED;;OAEG;IACG,eAAe;;YACjB,MAAM,+DAAS,CAAC,YAAY,CAAC,+DAAS,CAAC,WAAW,CAAC;gBAC/C,2DAAU,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAK,CAAC;gBAClD,2DAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC;aAC5E,CAAC,CAAC,CAAC;QACR,CAAC;KAAA;IAED;;OAEG;IACa,aAAa;;YACzB,IAAI,CAAC,SAAS,GAAG,MAAM,2DAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAE1E,IAAI,CAAC,OAAO,GAAG,2DAAU,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YAExE,MAAM,QAAQ,GAAG,MAAM,2DAAY,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;YAEhH,uBAAuB;YACvB,MAAM,QAAQ,GAAuB,EAAE,CAAC;YAExC,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAqC,EAAE,EAAE;gBAC7E,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC;gBAC7D,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE;oBACzC,4DAA4D;oBAC5D,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;gBACtD,CAAC,CAAC,CAAC;gBAEH,kEAAkE;gBAClE,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,YAAY,CAAC;gBAC/C,IAAI,OAAO,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;oBACjC,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC9D;gBAED,OAAO,OAAO,CAAC;YACnB,CAAC,CAAC,CAAC;YAEH,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE5B,OAAO,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC;QACxC,CAAC;KAAA;IAED;;OAEG;IACH,WAAW,CAAC,OAAqC;QAC7C,OAAO,GAAG,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;IAC3D,CAAC;IAED;;OAEG;IACH,kBAAkB;QACd,OAAO;YACH,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,OAAO,EAAE,IAAI,CAAC,OAAO;SACxB,CAAC;IACN,CAAC;IAED;;;;;OAKG;IACa,gBAAgB,CAAC,WAA6C;;YAC1E,IAAI,WAAW,CAAC,YAAY,EAAE;gBAC1B,OAAO;aACV;YAED,IAAI;gBACA,MAAM,IAAI,GAAG,MAAM,qEAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;gBAEjF,WAAW,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC;aAC5C;YAAC,WAAM;gBACJ,4DAA4D;gBAC5D,WAAW,CAAC,YAAY,GAAG,qDAAS,CAAC,OAAO,CAAC,kBAAkB,CAAC,GAAG,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC;aAC/F;QACL,CAAC;KAAA;CAEJ;;;;;;;;;;;;;AC7HD;AAAe,kjEAAm/D,wBAAwB,kBAAkB,GAAG,eAAe,wDAAwD,4CAA4C,GAAG,6BAA6B,iCAAiC,GAAG,wCAAwC,kBAAkB,2BAA2B,oCAAoC,0CAA0C,GAAG,wBAAwB,wBAAwB,sBAAsB,GAAG,gCAAgC,oBAAoB,uBAAuB,GAAG,6CAA6C,mw2DAAmw2D,E;;;;;;;;;;;;ACAn17D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEuC;AACuB;AAEnD;AACJ;AACQ;AACI;AACR;AACO;AACD;AACF;AACA;AAEyE;AAC9B;AACG;AAE9F;;GAEG;IAMU,oBAAoB,SAApB,oBAAoB;IAyB7B;QApBA,WAAM,GAAG,KAAK,CAAC;QACf,UAAK,GAAG,EAAE,CAAC;QACX,aAAQ,GAAmC,EAAE,CAAC;QAK9C,YAAO,GAAG,KAAK,CAAC;QAMN,aAAQ,GAAG,CAAC,CAAC;QACb,qBAAgB,GAAG,CAAC,CAAC;QAErB,kBAAa,GAAG,KAAK,CAAC;QACtB,mBAAc,GAAG,KAAK,CAAC;QACvB,UAAK,GAAuB,EAAE,CAAC;QAGrC,IAAI,CAAC,aAAa,GAAG,yDAAS,CAAC,oBAAoB,EAAE,CAAC;QACtD,IAAI,CAAC,QAAQ,GAAG,6DAAW,CAAC,QAAQ,EAAE,CAAC;QACvC,IAAI,CAAC,kBAAkB,GAAG,6DAAW,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE;YAC5D,sFAAsF;YACtF,mDAAM,CAAC,GAAG,CAAC,GAAG,EAAE;gBACZ,IAAI,CAAC,QAAQ,GAAG,6DAAW,CAAC,QAAQ,EAAE,CAAC;YAC3C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACG,QAAQ;;YACV,IAAI;gBACA,IAAI,CAAC,QAAQ,GAAG,iEAAa,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;gBACtE,IAAI,CAAC,IAAI,GAAG,iEAAa,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;gBAC9D,IAAI,CAAC,MAAM,GAAG,iEAAa,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CAAC;gBAClE,IAAI,CAAC,KAAK,GAAG,iEAAa,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBAExD,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;gBAEvB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;gBAE3B,IAAI,CAAC,YAAY,EAAE,CAAC;aACvB;YAAC,OAAO,KAAK,EAAE;gBACZ,gEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,qCAAqC,EAAE,IAAI,CAAC,CAAC;gBACvF,iEAAa,CAAC,IAAI,EAAE,CAAC;aACxB;oBAAS;gBACN,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;aACtB;QAEL,CAAC;KAAA;IAED;;;OAGG;IACH,eAAe;QACX,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,gBAAgB;QACZ,8DAAU,CAAC,OAAO,CAAC,8DAAU,CAAC,kBAAkB,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;QACtE,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACa,SAAS;;YACrB,IAAI,CAAC,SAAS,GAAG,MAAM,4DAAY,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/D,CAAC;KAAA;IAED;;;;OAIG;IACa,aAAa;;YACzB,MAAM,YAAY,GAAG,MAAM,4DAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE1F,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,eAAe,IAAI,CAAC,CAAC;YAElD,MAAM,QAAQ,GAAG,MAAM,4DAAY,CAAC,mBAAmB,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE9F,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBAClB,uCAAuC;gBACvC,OAAO;aACV;YAED,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC5C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAE/C,kEAAkE;YAClE,KAAK,IAAI,KAAK,GAAG,cAAc,EAAE,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBACpE,MAAM,WAAW,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBAErE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,yEAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,WAAW,CAAC,CAAC;gBAE/G,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAErC,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;oBAC5D,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;iBACpC;aACJ;YAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC;YAExD,2CAA2C;YAC3C,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1B,CAAC;KAAA;IAEe,kBAAkB,CAAC,OAAqC;;YACpE,OAAO,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAK,CAAC,CAAC;QAChE,CAAC;KAAA;IAED;;OAEG;IACG,aAAa;;;YACf,wBAAwB;YACxB,MAAM,SAAS,GAAG,MAAM,gEAAY,CAAC,aAAa,CAA+B;gBAC7E,SAAS,EAAE,oGAA+B;gBAC1C,cAAc,EAAE;oBACZ,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,IAAI,EAAE,IAAI,CAAC,IAAI;iBAClB;aACJ,CAAC,CAAC;YAEH,IAAI,SAAS,EAAE;gBACX,IAAI,SAAS,CAAC,MAAM,EAAE;oBAClB,IAAI,CAAC,UAAU,GAAG,MAAM,SAAS,CAAC,MAAM,IAAI,GAAG,CAAC,WAAI,CAAC,eAAe,0CAAE,OAAO,KAAI,EAAE,CAAC,CAAC;iBACxF;gBACD,IAAI,SAAS,CAAC,MAAM,EAAE;oBAClB,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;iBAC1C;gBAED,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;aAChC;;KACJ;IAED;;;;;OAKG;IACa,eAAe,CAAC,EAAU;;YACtC,MAAM,QAAQ,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAElC,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE;gBACjB,OAAO,EAAE,CAAC;aACb;YAED,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,QAAQ,CAAC,CAAC;YAE5D,IAAI,IAAI,EAAE;gBACN,OAAO,IAAI,CAAC,QAAQ,CAAC;aACxB;YAED,IAAI;gBACA,MAAM,IAAI,GAAG,MAAM,4DAAY,CAAC,YAAY,CAAC,IAAI,CAAC,SAAU,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;gBAEnF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACxB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,QAAQ,CAAC,CAAC;gBAE5D,IAAI,IAAI,EAAE;oBACN,OAAO,IAAI,CAAC,QAAQ,CAAC;iBACxB;gBAED,OAAO,EAAE,CAAC;aACb;YAAC,WAAM;gBACJ,iBAAiB;gBACjB,OAAO,EAAE,CAAC;aACb;QACL,CAAC;KAAA;IAED;;OAEG;IACO,YAAY;QAClB,wCAAwC;QACxC,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO;SACV;QAED,iBAAiB;QACjB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE;YACnC,+DAAS,CAAC,YAAY,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC;QACzD,CAAC,EAAE,oEAAoB,CAAC,aAAa,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACO,WAAW;QACjB,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACa,qBAAqB;;YACjC,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,cAAc,EAAE;gBACvC,sEAAsE;gBACtE,OAAO;aACV;YAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAE3B,IAAI;gBACA,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;aAC9B;YAAC,WAAM;gBACJ,IAAI;oBACA,kEAAkE;oBAClE,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;oBAEvB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;iBAC9B;gBAAC,OAAO,KAAK,EAAE;oBACZ,sCAAsC;oBACtC,IAAI,CAAC,WAAW,EAAE,CAAC;oBACnB,gEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,6CAA6C,EAAE,IAAI,CAAC,CAAC;oBAE/F,MAAM,KAAK,CAAC;iBACf;aACJ;oBAAS;gBACN,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;aAC/B;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACG,WAAW,CAAC,IAAY,EAAE,OAAe,CAAC;;YAC5C,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAChB,8CAA8C;gBAC9C,OAAO;aACV;iBAAM,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE;gBACnC,gBAAgB;gBAChB,OAAO;aACV;YAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YAEpB,IAAI;gBACA,MAAM,4DAAY,CAAC,WAAW,CAAC,IAAI,CAAC,SAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBAE5D,4CAA4C;gBAC5C,+DAAS,CAAC,YAAY,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC;aACxD;YAAC,OAAO,KAAK,EAAE;gBACZ,4FAA4F;gBAC5F,8CAA8C;gBAC9C,qDAAO,CAAC,aAAa,EAAE,CAAC;gBAExB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,gEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,yCAAyC,EAAE,IAAI,CAAC,CAAC;aAC9F;oBAAS;gBACN,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;aACxB;QACL,CAAC;KAAA;IAED;;;;OAIG;IACG,SAAS;;YACX,MAAM,KAAK,GAAG,MAAM,gEAAY,CAAC,gBAAgB,EAAE,CAAC;YAEpD,IAAI;gBACA,uHAAuH;gBACvH,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAEnC,qCAAqC;gBACrC,IAAI,CAAC,YAAY,EAAE,CAAC;aACvB;YAAC,WAAM;gBACJ,iBAAiB;aACpB;oBAAS;gBACN,KAAK,CAAC,OAAO,EAAE,CAAC;aACnB;QACL,CAAC;KAAA;IAED;;OAEG;IACG,cAAc;;;YAChB,2DAA2D;YAC3D,MAAM,+DAAS,CAAC,QAAQ,EAAE,CAAC;YAC3B,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBACrB,UAAI,CAAC,OAAO,0CAAE,cAAc,GAAG;aAClC;;KACJ;IAED;;;;OAIG;IACG,QAAQ;;YACV,IAAI,CAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBACrD,OAAO,IAAI,CAAC;aACf;YAED,2CAA2C;YAC3C,MAAM,gEAAY,CAAC,WAAW,CAAC,sDAAS,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC,CAAC;YAEhF,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAED;;OAEG;IACH,WAAW;QACP,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;QACjE,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;CAEJ;;;sBA9UI,uDAAS,SAAC,yDAAU;8BACpB,uDAAS,SAAC,4GAA4B;;AAH9B,oBAAoB;IALhC,+DAAS,CAAC;QACP,QAAQ,EAAE,0BAA0B;QACpC,sNAAwB;;KAE3B,CAAC;GACW,oBAAoB,CAgVhC;AAhVgC;;;;;;;;;;;;;ACvCjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEoB;AAC0C;AACrB;AAE1E;;GAEG;IAKU,qBAAqB,SAArB,qBAAsB,SAAQ,4GAA4D;CAItG;;gCAFI,uDAAS,SAAC,kFAA0B;;AAF5B,qBAAqB;IAJjC,+DAAS,CAAC;QACP,QAAQ,EAAE,2BAA2B;QACrC,yNAAyB;KAC5B,CAAC;GACW,qBAAqB,CAIjC;AAJiC;;;;;;;;;;;;;ACzBlC;AAAe,kjEAAm/D,wBAAwB,kBAAkB,GAAG,eAAe,wDAAwD,4CAA4C,GAAG,6BAA6B,iCAAiC,GAAG,wCAAwC,kBAAkB,2BAA2B,oCAAoC,0CAA0C,GAAG,wBAAwB,wBAAwB,sBAAsB,GAAG,gCAAgC,oBAAoB,uBAAuB,GAAG,6CAA6C,m02DAAm02D,E;;;;;;;;;;;;ACAn57D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEiB;AACM;AAEJ;AACR;AACO;AACD;AACC;AACkD;AAErG;;GAEG;IAMU,+BAA+B,SAA/B,+BAA+B;;QAIxC,aAAQ,GAA0C,EAAE,CAAC;QACrD,WAAM,GAAG,KAAK,CAAC;IAgHnB,CAAC;IAxGG;;OAEG;IACH,QAAQ;QACJ,IAAI;YACA,IAAI,CAAC,QAAQ,GAAG,iEAAa,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;YACtE,IAAI,CAAC,IAAI,GAAG,iEAAa,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;YAC9D,IAAI,CAAC,YAAY,GAAG,iEAAa,CAAC,2BAA2B,CAAC,cAAc,CAAC,CAAC;YAC9E,IAAI,CAAC,UAAU,GAAG,iEAAa,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;YAC1E,IAAI,CAAC,MAAM,GAAG,iEAAa,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CAAC;YAClE,IAAI,CAAC,OAAO,GAAG,iEAAa,CAAC,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACpE;QAAC,OAAO,KAAK,EAAE;YACZ,gEAAY,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAEnC,iEAAa,CAAC,IAAI,EAAE,CAAC;YAErB,OAAO;SACV;QAED,IAAI,CAAC,aAAa,GAAG,yDAAS,CAAC,oBAAoB,EAAE,CAAC;QAEtD,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACa,aAAa;;YACzB,IAAI;gBACA,MAAM,QAAQ,GAAG,MAAM,2DAAY,CAAC,kBAAkB,CAClD,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,OAAO,EACZ,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CACtB,CAAC;gBAEF,IAAI,CAAC,QAAQ,GAAG,MAAM,2DAAY,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAEhF,kEAAkE;gBAClE,KAAK,IAAI,KAAK,GAAG,CAAC,EAAG,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBACxD,MAAM,WAAW,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;oBAErE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,wEAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,WAAW,CAAC,CAAC;oBAE/G,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAErC,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;wBAC5D,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;qBACpC;iBACJ;gBAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC;aAC3D;YAAC,OAAO,KAAK,EAAE;gBACZ,gEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,0BAA0B,EAAE,IAAI,CAAC,CAAC;aAC/E;oBAAS;gBACN,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;aACtB;QACL,CAAC;KAAA;IAEe,kBAAkB,CAAC,OAA4C;;YAC3E,OAAO,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAK,CAAC,CAAC;QAChE,CAAC;KAAA;IAED;;;;;OAKG;IACa,eAAe,CAAC,EAAU;;YACtC,MAAM,QAAQ,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAElC,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE;gBACjB,OAAO,EAAE,CAAC;aACb;YAED,IAAI;gBACA,MAAM,IAAI,GAAG,MAAM,qEAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBAEtE,OAAO,IAAI,CAAC,QAAQ,CAAC;aACxB;YAAC,WAAM;gBACJ,yBAAyB;gBACzB,OAAO,EAAE,CAAC;aACb;QACL,CAAC;KAAA;IAED;;;;OAIG;IACG,eAAe,CAAC,SAAuB;;YACzC,IAAI;gBACA,MAAM,+DAAS,CAAC,YAAY,CAAC,2DAAY,CAAC,yBAAyB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAEnH,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;aAC9B;oBAAS;gBACN,SAAS,CAAC,QAAQ,EAAE,CAAC;aACxB;QACL,CAAC;KAAA;CAEJ;AArHY,+BAA+B;IAL3C,+DAAS,CAAC;QACP,QAAQ,EAAE,sCAAsC;QAChD,0PAAoC;;KAEvC,CAAC;GACW,+BAA+B,CAqH3C;AArH2C;;;;;;;;;;;;;AChC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAE8C;AACK;AACkC;AAC3C;AAGvB;AACD;AAC2D;AAE9G;;GAEG;IAKU,wBAAwB,sCAAxB,wBAAwB;IAMjC;QACI,IAAI;YACA,MAAM,QAAQ,GAAG,iEAAa,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;YACvE,MAAM,MAAM,GAAG,iEAAa,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CAAC;YACnE,MAAM,IAAI,GAAG,iEAAa,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;YAC/D,MAAM,MAAM,GAAG,mIAAoC,CAAC,iBAAiB,CACjE,wFAA0B,EAC1B,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAC3B,CAAC;YAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,iGAAoB,CAAC,MAAM,EAAE,0BAAwB,CAAC,CAAC;SAC9E;QAAC,OAAO,KAAK,EAAE;YACZ,gEAAY,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAEnC,iEAAa,CAAC,IAAI,EAAE,CAAC;YAErB,OAAO;SACV;IACL,CAAC;IAED,IAAI,OAAO;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC;IAC7C,CAAC;IAED,IAAI,OAAO,CAAC,KAAa;QACrB,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,OAAO,GAAG,KAAK,CAAC;IAC9C,CAAC;IAED,IAAI,OAAO;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC;IAC7C,CAAC;IAED,IAAI,OAAO,CAAC,KAAc;QACtB,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,OAAO,GAAG,KAAK,CAAC;IAC9C,CAAC;IAED,IAAI,SAAS;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC;IAC/C,CAAC;IAED;;OAEG;IACG,eAAe;;YACjB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAE3B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACxC,CAAC;KAAA;IAED;;;;OAIG;IACG,aAAa;;YACf,IAAI;gBACA,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aAC9B;YAAC,OAAO,KAAK,EAAE;gBACZ,gEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,0BAA0B,EAAE,IAAI,CAAC,CAAC;aAC/E;QACL,CAAC;KAAA;IAED;;OAEG;IACG,cAAc;;YAChB,MAAM,KAAK,GAAG,MAAM,gEAAY,CAAC,gBAAgB,EAAE,CAAC;YAEpD,IAAI;gBACA,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;aAChC;YAAC,OAAO,KAAK,EAAE;gBACZ,gEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,0BAA0B,EAAE,IAAI,CAAC,CAAC;aAC/E;oBAAS;gBACN,KAAK,CAAC,OAAO,EAAE,CAAC;aACnB;QACL,CAAC;KAAA;IAED;;;;OAIG;IACG,eAAe,CAAC,SAAuB;;YACzC,IAAI;gBACA,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAEzC,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,eAAe,EAAE,CAAC;gBAClD,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;aAC9B;oBAAS;gBACN,SAAS,CAAC,QAAQ,EAAE,CAAC;aACxB;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACH,aAAa,CAAC,OAAqC,EAAE,KAAY;QAC7D,IAAI,OAAO,CAAC,eAAe,EAAE;YACzB,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC;SAClD;QAED,KAAK,CAAC,eAAe,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,WAAW;QACP,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC5B,CAAC;CAEJ;;;wBAtHI,uDAAS,SAAC,wFAAsB;;AAFxB,wBAAwB;IAJpC,+DAAS,CAAC;QACP,QAAQ,EAAE,8BAA8B;QACxC,kOAA4B;KAC/B,CAAC;GACW,wBAAwB,CAwHpC;AAxHoC","file":"chat-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>\\r\\n                <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" *ngIf=\\\"loaded\\\" (click)=\\\"showChatUsers()\\\" [attr.aria-label]=\\\"'core.users' | translate\\\">\\r\\n                <ion-icon name=\\\"fas-users\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ion-list class=\\\"addon-messages-discussion-container\\\" aria-live=\\\"polite\\\">\\r\\n            <ng-container *ngFor=\\\"let message of messages; index as index; last as last\\\">\\r\\n\\r\\n                <p class=\\\"ion-text-center addon-messages-date\\\" *ngIf=\\\"message.showDate\\\">\\r\\n                    {{ message.timestamp * 1000 | coreFormatDate: \\\"strftimedayshort\\\" }}\\r\\n                </p>\\r\\n\\r\\n                <div class=\\\"ion-text-center addon-mod_chat-notice\\\" *ngIf=\\\"message.special\\\">\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"success\\\" *ngIf=\\\"message.system && message.message == 'enter'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-sign-in-alt\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messageenter' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"danger\\\" *ngIf=\\\"message.system && message.message == 'exit'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-sign-out-alt\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messageexit' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"primary\\\" *ngIf=\\\"message.beep == 'all'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-bell\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messagebeepseveryone' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"primary\\\"\\r\\n                        *ngIf=\\\"message.userid != currentUserId && message.beep == currentUserId\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-bell\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messagebeepsyou' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"light\\\"\\r\\n                        *ngIf=\\\"message.userid == currentUserId && message.beep && message.beep != 'all'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-bell\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messageyoubeep' | translate:{$a: message.beepWho} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"info\\\" *ngIf=\\\"!message.system && !message.beep\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-asterisk\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            <strong>\\r\\n                                {{ message.userfullname }} <core-format-text [text]=\\\"message.message\\\" contextLevel=\\\"module\\\"\\r\\n                                    [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\" (afterRender)=\\\"last && scrollToBottom()\\\">\\r\\n                                </core-format-text>\\r\\n                            </strong>\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n                </div>\\r\\n\\r\\n                <core-message *ngIf=\\\"!message.special\\\" [message]=\\\"message\\\" [user]=\\\"message\\\" [text]=\\\"message.message\\\"\\r\\n                    [time]=\\\"message.timestamp * 1000\\\" (afterRender)=\\\"last && scrollToBottom()\\\" contextLevel=\\\"module\\\" [instanceId]=\\\"cmId\\\"\\r\\n                    [courseId]=\\\"courseId\\\">\\r\\n                </core-message>\\r\\n            </ng-container>\\r\\n        </ion-list>\\r\\n\\r\\n        <core-empty-box *ngIf=\\\"!messages || messages.length <= 0\\\" icon=\\\"far-comments\\\" [message]=\\\"'addon.mod_chat.nomessages' | translate\\\">\\r\\n        </core-empty-box>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n<ion-footer class=\\\"footer-adjustable\\\">\\r\\n    <ion-toolbar [color]=\\\"isOnline && polling && loaded ? 'contrast' : 'light'\\\">\\r\\n        <p class=\\\"ion-text-center\\\" *ngIf=\\\"!isOnline\\\">\\r\\n            {{ 'addon.mod_chat.mustbeonlinetosendmessages' | translate }}\\r\\n        </p>\\r\\n\\r\\n        <core-send-message-form [sendDisabled]=\\\"sending\\\" *ngIf=\\\"isOnline && polling && loaded\\\" [message]=\\\"newMessage\\\"\\r\\n            (onSubmit)=\\\"sendMessage($event)\\\" [placeholder]=\\\"'addon.messages.newmessage' | translate\\\">\\r\\n        </core-send-message-form>\\r\\n\\r\\n        <ion-button *ngIf=\\\"isOnline && !polling && loaded\\\" (click)=\\\"reconnect()\\\" expand=\\\"block\\\" fill=\\\"outline\\\">\\r\\n            {{ 'core.login.reconnect' | translate }}\\r\\n        </ion-button>\\r\\n    </ion-toolbar>\\r\\n</ion-footer>\\r\\n\";","export default \"<ion-header collapsible>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>\\r\\n                <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"module?.id\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <!-- The buttons defined by the component will be added in here. -->\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"activityComponent?.showLoading\\\" (ionRefresh)=\\\"activityComponent?.doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <addon-mod-chat-index [module]=\\\"module\\\" [courseId]=\\\"courseId\\\" (dataRetrieved)=\\\"updateData($event)\\\"></addon-mod-chat-index>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.mod_chat.messages' | translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshMessages($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ion-list class=\\\"addon-messages-discussion-container\\\">\\r\\n            <ng-container *ngFor=\\\"let message of messages; index as index;\\\">\\r\\n\\r\\n                <div class=\\\"ion-text-center addon-messages-date\\\" *ngIf=\\\"message.showDate\\\">\\r\\n                    {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimedayshort\\\" }}\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"ion-text-center addon-mod_chat-notice\\\" *ngIf=\\\"message.special\\\">\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"success\\\" *ngIf=\\\"message.issystem && message.message == 'enter'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-sign-in-alt\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messageenter' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"danger\\\" *ngIf=\\\"message.issystem && message.message == 'exit'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-sign-out-alt\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messageexit' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"primary\\\" *ngIf=\\\"message.beep == 'all'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-bell\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messagebeepseveryone' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"primary\\\"\\r\\n                        *ngIf=\\\"message.userid != currentUserId && message.beep == currentUserId\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-bell\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messagebeepsyou' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"light\\\"\\r\\n                        *ngIf=\\\"message.userid == currentUserId && message.beep && message.beep != 'all'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-bell\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messageyoubeep' | translate:{$a: message.beepWho} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"info\\\" *ngIf=\\\"!message.issystem && !message.beep\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-asterisk\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            <strong>\\r\\n                                {{ message.userfullname }} <core-format-text [text]=\\\"message.message\\\" contextLevel=\\\"module\\\"\\r\\n                                    [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\"></core-format-text>\\r\\n                            </strong>\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n                </div>\\r\\n\\r\\n                <core-message *ngIf=\\\"!message.special\\\" [message]=\\\"message\\\" [user]=\\\"message\\\" [text]=\\\"message.message\\\"\\r\\n                    [time]=\\\"message.timestamp * 1000\\\" contextLevel=\\\"module\\\" [instanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-message>\\r\\n            </ng-container>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.mod_chat.chatreport' | translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!sessions.loaded\\\" (ionRefresh)=\\\"refreshSessions($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n        <core-loading [hideUntil]=\\\"sessions.loaded\\\">\\r\\n            <core-group-selector [groupInfo]=\\\"groupInfo\\\" [(selected)]=\\\"groupId\\\" (selectedChange)=\\\"reloadSessions()\\\"></core-group-selector>\\r\\n\\r\\n            <ion-item>\\r\\n                <ion-label>{{ 'addon.mod_chat.showincompletesessions' | translate }}</ion-label>\\r\\n                <ion-toggle [(ngModel)]=\\\"showAll\\\" (ionChange)=\\\"reloadSessions()\\\"></ion-toggle>\\r\\n            </ion-item>\\r\\n\\r\\n            <ion-card *ngFor=\\\"let session of sessions.items\\\" (click)=\\\"sessions.select(session)\\\" button\\r\\n                [attr.aria-current]=\\\"sessions.getItemAriaCurrent(session)\\\"\\r\\n                [class.addon-mod-chat-session-show-more]=\\\"session.sessionusers.length < session.allsessionusers.length\\\">\\r\\n\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ session.sessionstart * 1000 | coreFormatDate }}</p>\\r\\n                        <p *ngIf=\\\"session.duration\\\">{{ session.duration | coreDuration }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-card-content>\\r\\n                    <ion-item *ngFor=\\\"let user of session.sessionusers\\\">\\r\\n                        <ion-label>\\r\\n                            {{ user.userfullname }} <span *ngIf=\\\"user.messagecount\\\">({{ user.messagecount }})</span>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ion-card-content>\\r\\n                <ion-button *ngIf=\\\"session.sessionusers.length < session.allsessionusers.length\\\" fill=\\\"clear\\\" expand=\\\"block\\\"\\r\\n                    (click)=\\\"showMoreUsers(session, $event)\\\">\\r\\n                    {{ 'core.showmore' | translate }}\\r\\n                </ion-button>\\r\\n            </ion-card>\\r\\n\\r\\n            <core-empty-box *ngIf=\\\"sessions.empty\\\" icon=\\\"far-comments\\\" [message]=\\\"'addon.mod_chat.nosessionsfound' | translate\\\">\\r\\n            </core-empty-box>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonModChatComponentsModule } from './components/components.module';\nimport { AddonModChatIndexPage } from './pages/index/index';\nimport { AddonModChatChatPage } from './pages/chat/chat';\nimport { AddonModChatSessionMessagesPage } from './pages/session-messages/session-messages';\nimport { CoreScreen } from '@services/screen';\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { AddonModChatSessionsPage } from './pages/sessions/sessions';\nimport { CanLeaveGuard } from '@guards/can-leave';\n\nconst commonRoutes: Routes = [\n    {\n        path: ':courseId/:cmId',\n        component: AddonModChatIndexPage,\n    },\n    {\n        path: ':courseId/:cmId/chat',\n        component: AddonModChatChatPage,\n        canDeactivate: [CanLeaveGuard],\n    },\n];\n\nconst mobileRoutes: Routes = [\n    ...commonRoutes,\n    {\n        path: ':courseId/:cmId/sessions',\n        component: AddonModChatSessionsPage,\n    },\n    {\n        path: ':courseId/:cmId/sessions/:sessionStart/:sessionEnd',\n        component: AddonModChatSessionMessagesPage,\n    },\n];\n\nconst tabletRoutes: Routes = [\n    ...commonRoutes,\n    {\n        path: ':courseId/:cmId/sessions',\n        component: AddonModChatSessionsPage,\n        children: [\n            {\n                path: ':sessionStart/:sessionEnd',\n                component: AddonModChatSessionMessagesPage,\n            },\n        ],\n    },\n];\n\nconst routes: Routes = [\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        AddonModChatComponentsModule,\n    ],\n    declarations: [\n        AddonModChatIndexPage,\n        AddonModChatChatPage,\n        AddonModChatSessionsPage,\n        AddonModChatSessionMessagesPage,\n    ],\n})\nexport class AddonModChatLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Params } from '@angular/router';\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreGroupInfo, CoreGroups } from '@services/groups';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { AddonModChat, AddonModChatSession, AddonModChatSessionUser } from '../services/chat';\n\n/**\n * Provides a collection of sessions.\n */\nexport class AddonModChatSessionsSource extends CoreRoutedItemsManagerSource<AddonModChatSessionFormatted> {\n\n    readonly COURSE_ID: number;\n    readonly CHAT_ID: number;\n    readonly CM_ID: number;\n\n    showAll = false;\n    groupId = 0;\n    groupInfo?: CoreGroupInfo;\n\n    constructor(courseId: number, chatId: number, cmId: number) {\n        super();\n\n        this.COURSE_ID = courseId;\n        this.CHAT_ID = chatId;\n        this.CM_ID = cmId;\n    }\n\n    /**\n     * Invalidate chat cache.\n     */\n    async invalidateCache(): Promise<void> {\n        await CoreUtils.ignoreErrors(CoreUtils.allPromises([\n            CoreGroups.invalidateActivityGroupInfo(this.CM_ID),\n            AddonModChat.invalidateSessions(this.CHAT_ID, this.groupId, this.showAll),\n        ]));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadPageItems(): Promise<{ items: AddonModChatSessionFormatted[] }> {\n        this.groupInfo = await CoreGroups.getActivityGroupInfo(this.CM_ID, false);\n\n        this.groupId = CoreGroups.validateGroupId(this.groupId, this.groupInfo);\n\n        const sessions = await AddonModChat.getSessions(this.CHAT_ID, this.groupId, this.showAll, { cmId: this.CM_ID });\n\n        // Fetch user profiles.\n        const promises: Promise<unknown>[] = [];\n\n        const formattedSessions = sessions.map((session: AddonModChatSessionFormatted) => {\n            session.duration = session.sessionend - session.sessionstart;\n            session.sessionusers.forEach((sessionUser) => {\n                // The WS does not return the user name, fetch user profile.\n                promises.push(this.loadUserFullname(sessionUser));\n            });\n\n            // If session has more than 4 users we display a \"Show more\" link.\n            session.allsessionusers = session.sessionusers;\n            if (session.sessionusers.length > 4) {\n                session.sessionusers = session.allsessionusers.slice(0, 3);\n            }\n\n            return session;\n        });\n\n        await Promise.all(promises);\n\n        return { items: formattedSessions };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemPath(session: AddonModChatSessionFormatted): string {\n        return `${session.sessionstart}/${session.sessionend}`;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemQueryParams(): Params {\n        return {\n            chatId: this.CHAT_ID,\n            groupId: this.groupId,\n        };\n    }\n\n    /**\n     * Load the fullname of a user.\n     *\n     * @param id User ID.\n     * @return Promise resolved when done.\n     */\n    protected async loadUserFullname(sessionUser: AddonModChatUserSessionFormatted): Promise<void> {\n        if (sessionUser.userfullname) {\n            return;\n        }\n\n        try {\n            const user = await CoreUser.getProfile(sessionUser.userid, this.COURSE_ID, true);\n\n            sessionUser.userfullname = user.fullname;\n        } catch {\n            // Error getting profile, most probably the user is deleted.\n            sessionUser.userfullname = Translate.instant('core.deleteduser') + ' ' + sessionUser.userid;\n        }\n    }\n\n}\n\n/**\n * Fields added to chat session in this view.\n */\nexport type AddonModChatSessionFormatted = Omit<AddonModChatSession, 'sessionusers'> & {\n    duration?: number; // Session duration.\n    sessionusers: AddonModChatUserSessionFormatted[];\n    allsessionusers?: AddonModChatUserSessionFormatted[]; // All session users.\n};\n\n/**\n * Fields added to user session in this view.\n */\nexport type AddonModChatUserSessionFormatted = AddonModChatSessionUser & {\n    userfullname?: string; // User full name.\n};\n","export default \"/**\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here the different files you should import to use global variables.\\n */\\n/**\\n * Imported ionic string functions for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.string.scss\\n */\\n/**\\n * Imported ionic color functions for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.color.scss\\n */\\n/**\\n * Imported ionic mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\\n */\\n/**\\n * Imported ionic mixins for SCSS from different components\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/grid/grid.mixins.scss\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/item/item.mixins.scss\\n */\\n/**\\n * App custom mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n */\\n/**\\n * Same as item-push-svg-url but admits flip-rtl\\n */\\n/*\\n * App Custom App variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all custom app variables.\\n */\\n/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all global variables.\\n */\\n/**\\n * Layout Breakpoints\\n *\\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\\n */\\n:host-context(.ios) ion-footer .toolbar:last-child {\\n  padding-bottom: 4px;\\n  min-height: 0;\\n}\\nion-content {\\n  --content-background: var(--background-alternative);\\n  --background: var(--content-background);\\n}\\nion-content::part(scroll) {\\n  padding-bottom: 0 !important;\\n}\\n.addon-messages-discussion-container {\\n  display: flex;\\n  flex-direction: column;\\n  padding-bottom: 16px !important;\\n  background: var(--content-background);\\n}\\n.addon-messages-date {\\n  font-weight: normal;\\n  font-size: 0.9rem;\\n}\\n:host .addon-mod_chat-notice {\\n  margin-top: 8px;\\n  margin-bottom: 8px;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, ViewChild, OnInit, OnDestroy } from '@angular/core';\nimport { CoreSendMessageFormComponent } from '@components/send-message-form/send-message-form';\nimport { CanLeave } from '@guards/can-leave';\nimport { IonContent } from '@ionic/angular';\nimport { CoreApp } from '@services/app';\nimport { CoreNetwork } from '@services/network';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { NgZone, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { Subscription } from 'rxjs';\nimport { AddonModChatUsersModalComponent, AddonModChatUsersModalResult } from '../../components/users-modal/users-modal';\nimport { AddonModChat, AddonModChatProvider, AddonModChatUser } from '../../services/chat';\nimport { AddonModChatFormattedMessage, AddonModChatHelper } from '../../services/chat-helper';\n\n/**\n * Page that displays a chat session.\n */\n@Component({\n    selector: 'page-addon-mod-chat-chat',\n    templateUrl: 'chat.html',\n    styleUrls: ['chat.scss'],\n})\nexport class AddonModChatChatPage implements OnInit, OnDestroy, CanLeave {\n\n    @ViewChild(IonContent) content?: IonContent;\n    @ViewChild(CoreSendMessageFormComponent) sendMessageForm?: CoreSendMessageFormComponent;\n\n    loaded = false;\n    title = '';\n    messages: AddonModChatFormattedMessage[] = [];\n    newMessage?: string;\n    polling?: number;\n    isOnline: boolean;\n    currentUserId: number;\n    sending = false;\n    courseId!: number;\n    cmId!: number;\n\n    protected chatId!: number;\n    protected sessionId?: string;\n    protected lastTime = 0;\n    protected oldContentHeight = 0;\n    protected onlineSubscription: Subscription;\n    protected viewDestroyed = false;\n    protected pollingRunning = false;\n    protected users: AddonModChatUser[] = [];\n\n    constructor() {\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\n        this.isOnline = CoreNetwork.isOnline();\n        this.onlineSubscription = CoreNetwork.onChange().subscribe(() => {\n            // Execute the callback in the Angular zone, so change detection doesn't stop working.\n            NgZone.run(() => {\n                this.isOnline = CoreNetwork.isOnline();\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.chatId = CoreNavigator.getRequiredRouteNumberParam('chatId');\n            this.title = CoreNavigator.getRouteParam('title') || '';\n\n            await this.loginUser();\n\n            await this.fetchMessages();\n\n            this.startPolling();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_chat.errorwhileconnecting', true);\n            CoreNavigator.back();\n        } finally {\n            this.loaded = true;\n        }\n\n    }\n\n    /**\n     * Runs when the page has fully entered and is now the active page.\n     * This event will fire, whether it was the first load or a cached page.\n     */\n    ionViewDidEnter(): void {\n        this.startPolling();\n    }\n\n    /**\n     * Runs when the page is about to leave and no longer be the active page.\n     */\n    ionViewWillLeave(): void {\n        CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'chat' });\n        this.stopPolling();\n    }\n\n    /**\n     * Convenience function to login the user.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async loginUser(): Promise<void> {\n        this.sessionId = await AddonModChat.loginUser(this.chatId);\n    }\n\n    /**\n     * Convenience function to fetch chat messages.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchMessages(): Promise<void> {\n        const messagesInfo = await AddonModChat.getLatestMessages(this.sessionId!, this.lastTime);\n\n        this.lastTime = messagesInfo.chatnewlasttime || 0;\n\n        const messages = await AddonModChat.getMessagesUserData(messagesInfo.messages, this.courseId);\n\n        if (!messages.length) {\n            // No messages yet, nothing else to do.\n            return;\n        }\n\n        const previousLength = this.messages.length;\n        this.messages = this.messages.concat(messages);\n\n        // Calculate which messages need to display the date or user data.\n        for (let index = previousLength; index < this.messages.length; index++) {\n            const prevMessage = index > 0 ? this.messages[index - 1] : undefined;\n\n            this.messages[index] = AddonModChatHelper.formatMessage(this.currentUserId, this.messages[index], prevMessage);\n\n            const message = this.messages[index];\n\n            if (message.beep && message.beep != String(this.currentUserId)) {\n                this.loadMessageBeepWho(message);\n            }\n        }\n\n        this.messages[this.messages.length - 1].showTail = true;\n\n        // New messages or beeps, scroll to bottom.\n        this.scrollToBottom();\n    }\n\n    protected async loadMessageBeepWho(message: AddonModChatFormattedMessage): Promise<void> {\n        message.beepWho = await this.getUserFullname(message.beep!);\n    }\n\n    /**\n     * Display the chat users modal.\n     */\n    async showChatUsers(): Promise<void> {\n        // Create the toc modal.\n        const modalData = await CoreDomUtils.openSideModal<AddonModChatUsersModalResult>({\n            component: AddonModChatUsersModalComponent,\n            componentProps: {\n                sessionId: this.sessionId,\n                cmId: this.cmId,\n            },\n        });\n\n        if (modalData) {\n            if (modalData.talkTo) {\n                this.newMessage = `To ${modalData.talkTo}: ` + (this.sendMessageForm?.message || '');\n            }\n            if (modalData.beepTo) {\n                this.sendMessage('', modalData.beepTo);\n            }\n\n            this.users = modalData.users;\n        }\n    }\n\n    /**\n     * Get the user fullname for a beep.\n     *\n     * @param id User Id before parsing.\n     * @return User fullname.\n     */\n    protected async getUserFullname(id: string): Promise<string> {\n        const idNumber = parseInt(id, 10);\n\n        if (isNaN(idNumber)) {\n            return id;\n        }\n\n        const user = this.users.find((user) => user.id == idNumber);\n\n        if (user) {\n            return user.fullname;\n        }\n\n        try {\n            const data = await AddonModChat.getChatUsers(this.sessionId!, { cmId: this.cmId });\n\n            this.users = data.users;\n            const user = this.users.find((user) => user.id == idNumber);\n\n            if (user) {\n                return user.fullname;\n            }\n\n            return id;\n        } catch {\n            // Ignore errors.\n            return id;\n        }\n    }\n\n    /**\n     * Start the polling to get chat messages periodically.\n     */\n    protected startPolling(): void {\n        // We already have the polling in place.\n        if (this.polling) {\n            return;\n        }\n\n        // Start polling.\n        this.polling = window.setInterval(() => {\n            CoreUtils.ignoreErrors(this.fetchMessagesInterval());\n        }, AddonModChatProvider.POLL_INTERVAL);\n    }\n\n    /**\n     * Stop polling for messages.\n     */\n    protected stopPolling(): void {\n        clearInterval(this.polling);\n        this.polling = undefined;\n    }\n\n    /**\n     * Convenience function to be called every certain time to fetch chat messages.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchMessagesInterval(): Promise<void> {\n        if (!this.isOnline || this.pollingRunning) {\n            // Obviously we cannot check for new messages when the app is offline.\n            return;\n        }\n\n        this.pollingRunning = true;\n\n        try {\n            await this.fetchMessages();\n        } catch {\n            try {\n                // Try to login, it might have failed because the session expired.\n                await this.loginUser();\n\n                await this.fetchMessages();\n            } catch (error) {\n                // Fail again. Stop polling if needed.\n                this.stopPolling();\n                CoreDomUtils.showErrorModalDefault(error, 'addon.mod_chat.errorwhileretrievingmessages', true);\n\n                throw error;\n            }\n        } finally {\n            this.pollingRunning = false;\n        }\n    }\n\n    /**\n     * Send a message to the chat.\n     *\n     * @param text Text of the nessage.\n     * @param beep ID of the user to beep.\n     */\n    async sendMessage(text: string, beep: number = 0): Promise<void> {\n        if (!this.isOnline) {\n            // Silent error, the view should prevent this.\n            return;\n        } else if (beep === 0 && !text.trim()) {\n            // Silent error.\n            return;\n        }\n\n        this.sending = true;\n\n        try {\n            await AddonModChat.sendMessage(this.sessionId!, text, beep);\n\n            // Update messages to show the sent message.\n            CoreUtils.ignoreErrors(this.fetchMessagesInterval());\n        } catch (error) {\n            // Only close the keyboard if an error happens, we want the user to be able to send multiple\n            // messages without the keyboard being closed.\n            CoreApp.closeKeyboard();\n\n            this.newMessage = text;\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_chat.errorwhilesendingmessage', true);\n        } finally {\n            this.sending = false;\n        }\n    }\n\n    /**\n     * Try to reconnect.\n     *\n     * @return Promise resolved when done.\n     */\n    async reconnect(): Promise<void> {\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            // Call startPolling would take a while for the first execution, so we'll execute it manually to check if it works now.\n            await this.fetchMessagesInterval();\n\n            // It works, start the polling again.\n            this.startPolling();\n        } catch {\n            // Ignore errors.\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Scroll bottom when render has finished.\n     */\n    async scrollToBottom(): Promise<void> {\n        // Need a timeout to leave time to the view to be rendered.\n        await CoreUtils.nextTick();\n        if (!this.viewDestroyed) {\n            this.content?.scrollToBottom();\n        }\n    }\n\n    /**\n     * Check if we can leave the page or not.\n     *\n     * @return Resolved with true if we can leave it, rejected if not.\n     */\n    async canLeave(): Promise<boolean> {\n        if (! this.messages.some((message) => !message.special)) {\n            return true;\n        }\n\n        // Modified, confirm user wants to go back.\n        await CoreDomUtils.showConfirm(Translate.instant('addon.mod_chat.confirmloss'));\n\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.onlineSubscription && this.onlineSubscription.unsubscribe();\n        this.stopPolling();\n        this.viewDestroyed = true;\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, ViewChild } from '@angular/core';\nimport { CoreCourseModuleMainActivityPage } from '@features/course/classes/main-activity-page';\nimport { AddonModChatIndexComponent } from '../../components/index/index';\n\n/**\n * Page that displays a chat.\n */\n@Component({\n    selector: 'page-addon-mod-chat-index',\n    templateUrl: 'index.html',\n})\nexport class AddonModChatIndexPage extends CoreCourseModuleMainActivityPage<AddonModChatIndexComponent> {\n\n    @ViewChild(AddonModChatIndexComponent) activityComponent?: AddonModChatIndexComponent;\n\n}\n","export default \"/**\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here the different files you should import to use global variables.\\n */\\n/**\\n * Imported ionic string functions for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.string.scss\\n */\\n/**\\n * Imported ionic color functions for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.color.scss\\n */\\n/**\\n * Imported ionic mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\\n */\\n/**\\n * Imported ionic mixins for SCSS from different components\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/grid/grid.mixins.scss\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/item/item.mixins.scss\\n */\\n/**\\n * App custom mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n */\\n/**\\n * Same as item-push-svg-url but admits flip-rtl\\n */\\n/*\\n * App Custom App variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all custom app variables.\\n */\\n/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all global variables.\\n */\\n/**\\n * Layout Breakpoints\\n *\\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\\n */\\n:host-context(.ios) ion-footer .toolbar:last-child {\\n  padding-bottom: 4px;\\n  min-height: 0;\\n}\\nion-content {\\n  --content-background: var(--background-alternative);\\n  --background: var(--content-background);\\n}\\nion-content::part(scroll) {\\n  padding-bottom: 0 !important;\\n}\\n.addon-messages-discussion-container {\\n  display: flex;\\n  flex-direction: column;\\n  padding-bottom: 16px !important;\\n  background: var(--content-background);\\n}\\n.addon-messages-date {\\n  font-weight: normal;\\n  font-size: 0.9rem;\\n}\\n:host .addon-mod_chat-notice {\\n  margin-top: 8px;\\n  margin-bottom: 8px;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\nimport { CoreUser } from '@features/user/services/user';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonModChat } from '../../services/chat';\nimport { AddonModChatFormattedSessionMessage, AddonModChatHelper } from '../../services/chat-helper';\n\n/**\n * Page that displays list of chat session messages.\n */\n@Component({\n    selector: 'page-addon-mod-chat-session-messages',\n    templateUrl: 'session-messages.html',\n    styleUrls: ['session-messages.scss'],\n})\nexport class AddonModChatSessionMessagesPage implements OnInit {\n\n    currentUserId!: number;\n    cmId!: number;\n    messages: AddonModChatFormattedSessionMessage[] = [];\n    loaded = false;\n    courseId!: number;\n\n    protected chatId!: number;\n    protected sessionStart!: number;\n    protected sessionEnd!: number;\n    protected groupId!: number;\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        try {\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.sessionStart = CoreNavigator.getRequiredRouteNumberParam('sessionStart');\n            this.sessionEnd = CoreNavigator.getRequiredRouteNumberParam('sessionEnd');\n            this.chatId = CoreNavigator.getRequiredRouteNumberParam('chatId');\n            this.groupId = CoreNavigator.getRouteNumberParam('groupId') || 0;\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\n\n        this.fetchMessages();\n    }\n\n    /**\n     * Fetch session messages.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchMessages(): Promise<void> {\n        try {\n            const messages = await AddonModChat.getSessionMessages(\n                this.chatId,\n                this.sessionStart,\n                this.sessionEnd,\n                this.groupId,\n                { cmId: this.cmId },\n            );\n\n            this.messages = await AddonModChat.getMessagesUserData(messages, this.courseId);\n\n            // Calculate which messages need to display the date or user data.\n            for (let index = 0 ; index < this.messages.length; index++) {\n                const prevMessage = index > 0 ? this.messages[index - 1] : undefined;\n\n                this.messages[index] = AddonModChatHelper.formatMessage(this.currentUserId, this.messages[index], prevMessage);\n\n                const message = this.messages[index];\n\n                if (message.beep && message.beep != String(this.currentUserId)) {\n                    this.loadMessageBeepWho(message);\n                }\n            }\n\n            this.messages[this.messages.length - 1].showTail = true;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.errorloadingcontent', true);\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    protected async loadMessageBeepWho(message: AddonModChatFormattedSessionMessage): Promise<void> {\n        message.beepWho = await this.getUserFullname(message.beep!);\n    }\n\n    /**\n     * Get the user fullname for a beep.\n     *\n     * @param id User Id before parsing.\n     * @return User fullname.\n     */\n    protected async getUserFullname(id: string): Promise<string> {\n        const idNumber = parseInt(id, 10);\n\n        if (isNaN(idNumber)) {\n            return id;\n        }\n\n        try {\n            const user = await CoreUser.getProfile(idNumber, this.courseId, true);\n\n            return user.fullname;\n        } catch {\n            // Error getting profile.\n            return id;\n        }\n    }\n\n    /**\n     * Refresh session messages.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshMessages(refresher: IonRefresher): Promise<void> {\n        try {\n            await CoreUtils.ignoreErrors(AddonModChat.invalidateSessionMessages(this.chatId, this.sessionStart, this.groupId));\n\n            await this.fetchMessages();\n        } finally {\n            refresher.complete();\n        }\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\nimport { CoreListItemsManager } from '@classes/items-management/list-items-manager';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreGroupInfo } from '@services/groups';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { AddonModChatSessionFormatted, AddonModChatSessionsSource } from '../../classes/chat-sessions-source';\n\n/**\n * Page that displays list of chat sessions.\n */\n@Component({\n    selector: 'page-addon-mod-chat-sessions',\n    templateUrl: 'sessions.html',\n})\nexport class AddonModChatSessionsPage implements AfterViewInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    sessions!: CoreListItemsManager<AddonModChatSessionFormatted, AddonModChatSessionsSource>;\n\n    constructor() {\n        try {\n            const courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            const chatId = CoreNavigator.getRequiredRouteNumberParam('chatId');\n            const cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n                AddonModChatSessionsSource,\n                [courseId, chatId, cmId],\n            );\n\n            this.sessions = new CoreListItemsManager(source, AddonModChatSessionsPage);\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n    }\n\n    get groupId(): number {\n        return this.sessions.getSource().groupId;\n    }\n\n    set groupId(value: number) {\n        this.sessions.getSource().groupId = value;\n    }\n\n    get showAll(): boolean {\n        return this.sessions.getSource().showAll;\n    }\n\n    set showAll(value: boolean) {\n        this.sessions.getSource().showAll = value;\n    }\n\n    get groupInfo(): CoreGroupInfo | undefined {\n        return this.sessions.getSource().groupInfo;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        await this.fetchSessions();\n\n        this.sessions.start(this.splitView);\n    }\n\n    /**\n     * Fetch chat sessions.\n     *\n     * @param showLoading Display a loading modal.\n     */\n    async fetchSessions(): Promise<void> {\n        try {\n            await this.sessions.load();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.errorloadingcontent', true);\n        }\n    }\n\n    /**\n     * Reload chat sessions.\n     */\n    async reloadSessions(): Promise<void> {\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            await this.sessions.reload();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.errorloadingcontent', true);\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Refresh chat sessions.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshSessions(refresher: IonRefresher): Promise<void> {\n        try {\n            this.sessions.getSource().setDirty(true);\n\n            await this.sessions.getSource().invalidateCache();\n            await this.fetchSessions();\n        } finally {\n            refresher.complete();\n        }\n    }\n\n    /**\n     * Show more session users.\n     *\n     * @param session Chat session.\n     * @param event The event.\n     */\n    showMoreUsers(session: AddonModChatSessionFormatted, event: Event): void {\n        if (session.allsessionusers) {\n            session.sessionusers = session.allsessionusers;\n        }\n\n        event.stopPropagation();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.sessions.destroy();\n    }\n\n}\n"],"sourceRoot":"webpack:///"}